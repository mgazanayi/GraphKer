MATCH (cve:CVE)-[:HAS_CVSS3_SCORE]->(cvss3:CVSS_3)
WHERE cve.id = 'CVE-2020-1472'
WITH cve,cvss3
CALL apoc.create.vNode(['CVSS3Topic'],{topic:'attackComplexity'}) yield node as attackComplexity
CALL apoc.create.vRelationship(cve,'SCORED',{current:cvss3.attackComplexity , target: 0}, attackComplexity) YIELD rel AS attackComplexityRel

CALL apoc.create.vNode(['CVSS3Topic'],{topic:'attackVector'}) yield node as attackVector
CALL apoc.create.vRelationship(cve,'SCORED',{current:cvss3.attackVector, target: 0}, attackVector) YIELD rel AS attackVectorRel

CALL apoc.create.vNode(['CVSS3Topic'],{topic:'availabilityImpact'}) yield node as availabilityImpact
CALL apoc.create.vRelationship(cve,'SCORED',{current:cvss3.availabilityImpact , target: 0}, availabilityImpact) YIELD rel AS availabilityImpactRel

CALL apoc.create.vNode(['CVSS3Topic'],{topic:'baseScore'}) yield node as baseScore
CALL apoc.create.vRelationship(cve,'SCORED',{current:cvss3.baseScore , target: 0}, baseScore) YIELD rel AS baseScoreRel

CALL apoc.create.vNode(['CVSS3Topic'],{topic:'baseSeverity'}) yield node as baseSeverity
CALL apoc.create.vRelationship(cve,'SCORED',{current:cvss3.baseSeverity , target: 0}, baseSeverity) YIELD rel AS baseSeverityRel

CALL apoc.create.vNode(['CVSS3Topic'],{topic:'scope'}) yield node as scope
CALL apoc.create.vRelationship(cve,'SCORED',{current:cvss3.cope , target: 0}, scope) YIELD rel AS scopeRel

CALL apoc.create.vNode(['CVSS3Topic'],{topic:'integrityImpact'}) yield node as integrityImpact
CALL apoc.create.vRelationship(cve,'SCORED',{current:cvss3.integrityImpact , target: 0}, integrityImpact) YIELD rel AS integrityImpactRel

CALL apoc.create.vNode(['CVSS3Topic'],{topic:'privilegesRequired'}) yield node as privilegesRequired
CALL apoc.create.vRelationship(cve,'SCORED',{current:cvss3.privilegesRequired , target: 0}, privilegesRequired) YIELD rel AS privilegesRequiredRel

CALL apoc.create.vNode(['CVSS3Topic'],{topic:'userInteraction'}) yield node as userInteraction
CALL apoc.create.vRelationship(cve,'SCORED',{current:cvss3.userInteraction , target: 0}, userInteraction) YIELD rel AS userInteractionRel

RETURN *

============================

CALL apoc.periodic.iterate('MATCH (cve:CVE)-[:HAS_CVSS3_SCORE]->(cvss3:CVSS_3) RETURN cve, cvss3',
"
CREATE (cvss3TopicContext:CVSS3TopicContext)
CREATE (cve)-[:HAS_CVSS3_TOPIC_CONTEXT]->(cvss3TopicContext)
CREATE (cvss3)-[:HAS_CVSS3_TOPIC_CONTEXT]->(cvss3TopicContext)

CREATE (attackComplexity:CVSS3Topic {topic: 'attackComplexity'})
CREATE (cvss3TopicContext)-[:SCORED {current:cvss3.attackComplexityScore , target: 1}]->(attackComplexity)

CREATE (attackVector:CVSS3Topic {topic: 'attackVector'})
CREATE (cvss3TopicContext)-[:SCORED {current:cvss3.attackVectorScore, target: 1}]->(attackVector)

CREATE (availabilityImpact:CVSS3Topic {topic: 'availabilityImpact'})
CREATE (cvss3TopicContext)-[:SCORED {current:cvss3.availabilityImpactScore , target: 0}]->(availabilityImpact)

CREATE (baseScore:CVSS3Topic {topic: 'baseScore'})
CREATE (cvss3TopicContext)-[:SCORED {current:cvss3.baseScore , target: 0}]->(baseScore)

CREATE (baseSeverity:CVSS3Topic {topic: 'baseSeverity'})
CREATE (cvss3TopicContext)-[:SCORED {current:cvss3.baseSeverityScore , target: 0}]->(baseSeverity)

CREATE (scope:CVSS3Topic {topic: 'scope'})
CREATE (cvss3TopicContext)-[:SCORED {current:cvss3.scopeScore , target: 0}]->(scope)

CREATE (integrityImpact:CVSS3Topic {topic: 'integrityImpact'})
CREATE (cvss3TopicContext)-[:SCORED {current:cvss3.integrityImpactScore , target: 0}]->(integrityImpact)

CREATE (privilegesRequired:CVSS3Topic {topic: 'privilegesRequired'})
CREATE (cvss3TopicContext)-[:SCORED {current:cvss3.privilegesRequiredScore , target: 0}]->(privilegesRequired)


CREATE (userInteraction:CVSS3Topic {topic: 'userInteraction'})
CREATE (cvss3TopicContext)-[:SCORED {current:cvss3.userInteractionScore , target: 0}]->(userInteraction)
",
{batchSize:1000})
----------


MATCH (cve:CVE)-[:HAS_CVSS3_SCORE]->(cvss3:CVSS_3)
WHERE cve.id='CVE-2020-1472'

CREATE (cvss3TopicContext:CVSS3TopicContext)
CREATE (cve)-[:HAS_CVSS3_TOPIC_CONTEXT]->(cvss3TopicContext)
CREATE (cvss3)-[:HAS_CVSS3_TOPIC_CONTEXT]->(cvss3TopicContext)

CREATE (attackComplexity:CVSS3Topic {topic: 'attackComplexity'})
CREATE (cvss3TopicContext)-[:SCORED {current:cvss3.attackComplexityScore , target: 1}]->(attackComplexity)

CREATE (attackVector:CVSS3Topic {topic: 'attackVector'})
CREATE (cvss3TopicContext)-[:SCORED {current:cvss3.attackVectorScore, target: 1}]->(attackVector)

CREATE (availabilityImpact:CVSS3Topic {topic: 'availabilityImpact'})
CREATE (cvss3TopicContext)-[:SCORED {current:cvss3.availabilityImpactScore , target: 0}]->(availabilityImpact)

CREATE (baseScore:CVSS3Topic {topic: 'baseScore'})
CREATE (cvss3TopicContext)-[:SCORED {current:cvss3.baseScore , target: 0}]->(baseScore)

CREATE (baseSeverity:CVSS3Topic {topic: 'baseSeverity'})
CREATE (cvss3TopicContext)-[:SCORED {current:cvss3.baseSeverityScore , target: 0}]->(baseSeverity)

CREATE (scope:CVSS3Topic {topic: 'scope'})
CREATE (cvss3TopicContext)-[:SCORED {current:cvss3.scopeScore , target: 0}]->(scope)

CREATE (integrityImpact:CVSS3Topic {topic: 'integrityImpact'})
CREATE (cvss3TopicContext)-[:SCORED {current:cvss3.integrityImpactScore , target: 0}]->(integrityImpact)

CREATE (privilegesRequired:CVSS3Topic {topic: 'privilegesRequired'})
CREATE (cvss3TopicContext)-[:SCORED {current:cvss3.privilegesRequiredScore , target: 0}]->(privilegesRequired)


CREATE (userInteraction:CVSS3Topic {topic: 'userInteraction'})
CREATE (cvss3TopicContext)-[:SCORED {current:cvss3.userInteractionScore , target: 0}]->(userInteraction)

====================

CALL apoc.periodic.iterate('MATCH (cve:CVE)-[:HAS_CVSS3_SCORE]->(cvss3:CVSS_3) RETURN cve,cvss3',
"
WITH cve,cvss3
CREATE (attackComplexity:CVSS3Topic {topic: 'attackComplexity'})
CREATE (cvss3)-[:SCORED {current:cvss3.attackComplexityScore , target: 1}]->(attackComplexity)

CREATE (attackVector:CVSS3Topic {topic: 'attackVector'})
CREATE (cvss3)-[:SCORED {current:cvss3.attackVectorScore, target: 1}]->(attackVector)

CREATE (availabilityImpact:CVSS3Topic {topic: 'availabilityImpact'})
CREATE (cvss3)-[:SCORED {current:cvss3.availabilityImpactScore , target: 0}]->(availabilityImpact)

CREATE (baseScore:CVSS3Topic {topic: 'baseScore'})
CREATE (cvss3)-[:SCORED {current:cvss3.baseScore , target: 0}]->(baseScore)

CREATE (baseSeverity:CVSS3Topic {topic: 'baseSeverity'})
CREATE (cvss3)-[:SCORED {current:cvss3.baseSeverityScore , target: 0}]->(baseSeverity)

CREATE (scope:CVSS3Topic {topic: 'scope'})
CREATE (cvss3)-[:SCORED {current:cvss3.scopeScore , target: 0}]->(scope)

CREATE (integrityImpact:CVSS3Topic {topic: 'integrityImpact'})
CREATE (cvss3)-[:SCORED {current:cvss3.integrityImpactScore , target: 0}]->(integrityImpact)

CREATE (privilegesRequired:CVSS3Topic {topic: 'privilegesRequired'})
CREATE (cvss3)-[:SCORED {current:cvss3.privilegesRequiredScore , target: 0}]->(privilegesRequired)


CREATE (userInteraction:CVSS3Topic {topic: 'userInteraction'})
CREATE (cvss3)-[:SCORED {current:cvss3.userInteractionScore , target: 0}]->(userInteraction)
",
{batchSize: 500}
)

===================

CALL apoc.periodic.iterate('MATCH (cve:CVE)-[:HAS_CVSS3_SCORE]->(cvss3:CVSS_3) RETURN cve,cvss3',
"
WITH cve,cvss3
CREATE (attackComplexity:CVSS3Topic {topic: 'attackComplexity'})
CREATE (cvss3)-[:SCORED {current:cvss3.attackComplexity , target: 1}]->(attackComplexity)

CREATE (attackVector:CVSS3Topic {topic: 'attackVector'})
CREATE (cvss3)-[:SCORED {current:cvss3.attackVector, target: 1}]->(attackVector)

CREATE (availabilityImpact:CVSS3Topic {topic: 'availabilityImpact'})
CREATE (cvss3)-[:SCORED {current:cvss3.availabilityImpact , target: 0}]->(availabilityImpact)

CREATE (baseScore:CVSS3Topic {topic: 'baseScore'})
CREATE (cvss3)-[:SCORED {current:cvss3.baseScore , target: 0}]->(baseScore)

CREATE (baseSeverity:CVSS3Topic {topic: 'baseSeverity'})
CREATE (cvss3)-[:SCORED {current:cvss3.baseSeverity , target: 0}]->(baseSeverity)

CREATE (scope:CVSS3Topic {topic: 'scope'})
CREATE (cvss3)-[:SCORED {current:cvss3.cope , target: 0}]->(scope)

CREATE (integrityImpact:CVSS3Topic {topic: 'integrityImpact'})
CREATE (cvss3)-[:SCORED {current:cvss3.integrityImpact , target: 0}]->(integrityImpact)

CREATE (privilegesRequired:CVSS3Topic {topic: 'privilegesRequired'})
CREATE (cvss3)-[:SCORED {current:cvss3.privilegesRequired , target: 0}]->(privilegesRequired)


CREATE (userInteraction:CVSS3Topic {topic: 'userInteraction'})
CREATE (cvss3)-[:SCORED {current:cvss3.userInteraction , target: 0}]->(userInteraction)
",
{batchSize: 500}
)


====================

CALL apoc.periodic.iterate('MATCH (cvss3:CVSS_3) RETURN cvss3', "
WITH cvss3
SET cvss3.attackComplexityScore= 
CASE
    WHEN cvss3.attackComplexity='LOW' THEN 5
    ELSE 1
END,
cvss3.attackVectorScore= 
CASE
    WHEN cvss3.attackVector='NETWORK' THEN 5
    WHEN cvss3.attackVector='ADJACENT' THEN 4
    WHEN cvss3.attackVector='LOCAL' THEN 3
    WHEN cvss3.attackVector='PHYSICAL' THEN 2
    ELSE 1
END,
cvss3.availabilityImpactScore= 
CASE
    WHEN cvss3.availabilityImpact='HIGH' THEN 5
    WHEN cvss3.availabilityImpact='LOW' THEN 3
    ELSE 0
END,
cvss3.baseSeverityScore= 
CASE
    WHEN cvss3.baseSeverity='CRITICAL' THEN 5
    WHEN cvss3.baseSeverity='HIGH' THEN 4
    WHEN cvss3.baseSeverity='MEDIUM' THEN 3
    WHEN cvss3.baseSeverity='LOW' THEN 2
    ELSE 0
END,cvss3.confidentialityImpactScore= 
CASE
    WHEN cvss3.confidentialityImpact='HIGH' THEN 5
    WHEN cvss3.confidentialityImpact='LOW' THEN 2
    ELSE 0
END,cvss3.scopeScore= 
CASE
    WHEN cvss3.cope='CHANGED' THEN 5
    ELSE 0
END,cvss3.integrityImpactScore= 
CASE
    WHEN cvss3.integrityImpact='HIGH' THEN 5
    WHEN cvss3.integrityImpact='LOW' THEN 2
    ELSE 0
END,cvss3.privilegesRequiredScore= 
CASE
    WHEN cvss3.privilegesRequired='HIGH' THEN 5
    WHEN cvss3.privilegesRequired='LOW' THEN 2
    ELSE 0
END,cvss3.userInteractionScore= 
CASE
    WHEN cvss3.userInteraction='NONE' THEN 5
    ELSE 0
END
", {batchSize:1000})

====================

MATCH (cve:CVE)-[:HAS_CVSS3_SCORE]->(cvss3:CVSS_3)
WHERE cve.id = 'CVE-2020-1472'
SET cvss3.attackComplexityScore= 
CASE
    WHEN cvss3.attackComplexity='LOW' THEN 5
    ELSE 1
END,
cvss3.attackVectorScore= 
CASE
    WHEN cvss3.attackVector='NETWORK' THEN 5
    WHEN cvss3.attackVector='ADJACENT' THEN 4
    WHEN cvss3.attackVector='LOCAL' THEN 3
    WHEN cvss3.attackVector='PHYSICAL' THEN 2
    ELSE 1
END,
cvss3.availabilityImpactScore= 
CASE
    WHEN cvss3.availabilityImpact='HIGH' THEN 5
    WHEN cvss3.availabilityImpact='LOW' THEN 3
    ELSE 0
END,
cvss3.baseSeverityScore= 
CASE
    WHEN cvss3.baseSeverity='CRITICAL' THEN 5
    WHEN cvss3.baseSeverity='HIGH' THEN 4
    WHEN cvss3.baseSeverity='MEDIUM' THEN 3
    WHEN cvss3.baseSeverity='LOW' THEN 2
    ELSE 0
END,cvss3.confidentialityImpactScore= 
CASE
    WHEN cvss3.confidentialityImpact='HIGH' THEN 5
    WHEN cvss3.confidentialityImpact='LOW' THEN 2
    ELSE 0
END,cvss3.scopeScore= 
CASE
    WHEN cvss3.cope='CHANGED' THEN 5
    ELSE 0
END,cvss3.integrityImpactScore= 
CASE
    WHEN cvss3.integrityImpact='HIGH' THEN 5
    WHEN cvss3.integrityImpact='LOW' THEN 2
    ELSE 0
END,cvss3.privilegesRequiredScore= 
CASE
    WHEN cvss3.privilegesRequired='HIGH' THEN 5
    WHEN cvss3.privilegesRequired='LOW' THEN 2
    ELSE 0
END,cvss3.userInteractionScore= 
CASE
    WHEN cvss3.userInteraction='NONE' THEN 5
    ELSE 0
END

